tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.janus.samples.consul.linux.ansible
  template_version: 1.0.0-SNAPSHOT
  template_author: janus

imports:
  - tosca-normative-types:1.0.0-ALIEN20SM5
  - janus-types:1.0.0
  - org.janus.samples.consul.pub:1.0.0-SNAPSHOT

description: >
  This component allows to deploy Consul with Ansible


node_types:
  org.janus.samples.consul.linux.ansible.nodes.ConsulServer:
    derived_from: org.janus.samples.consul.pub.nodes.ConsulServer
    description: Installation of a Consul Server on Linux using Ansible
    tags:
      icon: /images/consul-icon.png
    properties:
      install_dnsmasq:
        type: boolean
        description: >
          By default, a dnsmask is installed as a DNS proxy.
          It is sometimes needed to remove it if another DNS is already installed (bind for example)
        default: true
    requirements:
      - wan_server:
          # Optionally a server may join another server in another data center using the WAN interface
          capability: org.janus.samples.consul.pub.capabilities.ConsulServerWAN
          relationship: org.janus.samples.consul.linux.ansible.relationships.JoinServerWAN
          occurrences: [0, 1]
    interfaces:
      Standard:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
          CONFIG_DIR: { get_property: [SELF, config_dir] }
          MODE: { get_property: [SELF, mode] }
          DATA_DIR: { get_property: [SELF, data_dir] }
        create:
          description: Consul installation step
          inputs:
            INSTALL_DNSMASQ: { get_property: [SELF, install_dnsmasq] }
            DOMAIN: { get_property: [SELF, domain] }
            DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: playbooks/consul_install.yaml
        configure:
          inputs:
            DATACENTER: { get_property: [SELF, datacenter] }
            DOMAIN: { get_property: [SELF, domain] }
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            WAN_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/consul_configure.yaml
        start:
          implementation: playbooks/consul_start.yml
        stop:
          implementation: playbooks/consul_stop.yaml
      custom:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
        maintenance_on:
          inputs:
            MAINT_MODE: "on"
          implementation: playbooks/consul_maint.yml
        maintenance_off:
          inputs:
            MAINT_MODE: "off"
          implementation: playbooks/consul_maint.yml

  org.janus.samples.consul.linux.ansible.nodes.ConsulAgent:
    derived_from: org.janus.samples.consul.pub.nodes.ConsulAgent
    description: Installation of a Consul Agent on Linux using Ansible
    tags:
      icon: /images/consul-icon.png
    properties:
      install_dnsmasq:
        type: boolean
        description: >
          By default, a dnsmask is installed as a DNS proxy.
          It is sometimes needed to remove it if another DNS is already installed (bind for example)
        default: true
    requirements:
      - consul_server:
          # An agent requires a server to operate
          capability: org.janus.samples.consul.pub.capabilities.ConsulServer
          relationship: org.janus.samples.consul.linux.ansible.relationships.JoinServer
          occurrences: [1, 1]
    interfaces:
      Standard:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
          CONFIG_DIR: { get_property: [SELF, config_dir] }
          MODE: { get_property: [SELF, mode] }
          DATA_DIR: { get_property: [SELF, data_dir] }
        create:
          description: Consul installation step
          inputs:
            INSTALL_DNSMASQ: { get_property: [SELF, install_dnsmasq] }
            DOMAIN: { get_property: [SELF, domain] }
            DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: playbooks/consul_install.yaml
        configure:
          inputs:
            DATACENTER: { get_property: [SELF, datacenter] }
            DOMAIN: { get_property: [SELF, domain] }
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            WAN_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/consul_configure.yaml
        start:
          implementation: playbooks/consul_start.yml
        stop:
          implementation: playbooks/consul_stop.yaml
      custom:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
        maintenance_on:
          inputs:
            MAINT_MODE: "on"
          implementation: playbooks/consul_maint.yml
        maintenance_off:
          inputs:
            MAINT_MODE: "off"
          implementation: playbooks/consul_maint.yml

relationship_types:
  org.janus.samples.consul.linux.ansible.relationships.JoinServer:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul agent to a Consul server
    valid_target_types: [ org.janus.samples.consul.pub.capabilities.ConsulServer ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SERVER_IP: { get_attribute: [TARGET, private_address] }
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
          implementation: playbooks/consul_connects_agent_to_server.yml

  org.janus.samples.consul.linux.ansible.relationships.JoinServerWAN:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul server to another Consul server using its WAN address
    valid_target_types: [ org.janus.samples.consul.pub.capabilities.ConsulServerWAN ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SERVER_WAN_IP: { get_attribute: [TARGET, public_address] }
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
          implementation: playbooks/consul_connects_servers_wan.yaml

